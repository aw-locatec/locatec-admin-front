{"version":3,"sources":["stores/loginState.js","constants/Link.js","components/auth/Auth.js","mainImage.png","routes/Login.js","components/dashbord/CustomDrawer.js","components/dashbord/CustomToolbar.js","constants/Strings.js","constants/types.js","utils/mapLocTypeToStr.js","components/request/PageList.js","components/elements/MapWrap.js","components/request/PageItem.js","components/wholeList/WholeList.js","components/wholeList/WholeListItem,.js","routes/Home.js","routes/Main.js","App.js","stores/index.js","index.js"],"names":["LOGINED","LOGOUT","logined","uid","type","loginReducer","createReducer","isLogined","state","action","REQUEST","REQUEST_ITEM","WHOLELIST","WHOLELIST_ITEM","ErrorMessege","styled","div","useStyles","makeStyles","theme","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","marginTop","submit","connect","dispatch","onLogined","history","useHistory","useState","email","setEmail","pw","setPw","errMsg","classes","className","Avatar","Typography","component","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","value","onChange","e","target","autoFocus","Button","color","onClick","preventDefault","push","root","height","image","backgroundImage","pic","backgroundRepeat","backgroundSize","backgroundPosition","Grid","container","CssBaseline","item","xs","sm","md","Paper","elevation","square","drawerPaper","position","whiteSpace","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerPaperClose","overflowX","leavingScreen","breakpoints","up","toolbarIcon","justifyContent","padding","mixins","toolbar","CustomDrawer","open","handleDrawerClose","Drawer","clsx","IconButton","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","paddingRight","appBar","zIndex","drawer","appBarShift","marginLeft","menuButton","marginRight","menuButtonHidden","title","flexGrow","onLogout","handleDrawerOpen","AppBar","Toolbar","edge","aria-label","noWrap","fontSize","smokingPlace","trashcan","SMOKE","TRASHCAN","locationTypeArray","mapLocTypeToStr","PageList","list","setLoading","setItem","setRefresh","a","onApprove","window","confirm","prev","alert","onDecline","gutterBottom","length","map","idx","coords","latitude","longitude","ListItemSecondaryAction","MapWrap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","MapWrapWithScript","googleMapURL","process","loadingElement","style","containerElement","mapElement","maxWidth","float","goPage","lineHeight","textAlign","PageItem","src","alt","left","top","transform","WholeList","isMutation","topButton","WholeListItem","curItem","setCurItem","setIsMutation","isEdit","setIsEdit","anchorEl","setAnchorEl","photoAddBtnRef","useRef","useEffect","onPressComplete","obj","productId","startsWith","substring","indexOf","console","log","response","currentTarget","Boolean","onClose","MenuItem","latLng","current","click","ref","accept","reader","FileReader","onloadend","base64","result","files","readAsDataURL","overflow","fixedHeight","content","paddingTop","paddingBottom","loading","appBarSpacer","tempRequestList","Home","requestItem","setRequestItem","requestList","setRequestList","wholeListItem","setWholeListItem","wholeList","setWholeList","refresh","fixedHeightPaper","getList","Container","exact","path","Modal","CircularProgress","React","setOpen","test","navigator","userAgent","App","basename","Login","Main","persistConfig","key","storage","rootReducer","combineReducers","enhancedReducer","persistReducer","store","createStore","persistor","persistStore","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1719fa38.chunk.js","sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\";\r\n\r\n// 액션 타입\r\nconst LOGINED = \"LOGINED\";\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\n// 액션 함수\r\nexport const logined = (uid) => ({ type: LOGINED, uid });\r\nexport const logout = () => ({ type: LOGOUT });\r\n\r\n// reducer\r\nconst loginReducer = createReducer(\r\n   { isLogined: false, uid: \"\" },\r\n   {\r\n      [LOGINED]: (state, action) => ({\r\n         isLogined: true,\r\n         uid: action.uid,\r\n      }),\r\n      [LOGOUT]: () => ({ isLogined: false }),\r\n   }\r\n);\r\n\r\nexport default loginReducer;\r\n","// 네비게이션 링크\r\n\r\nexport const REQUEST = \"/main/request\";\r\nexport const REQUEST_ITEM = \"/main/request/item\";\r\n\r\nexport const WHOLELIST = \"/main/list\";\r\nexport const WHOLELIST_ITEM = \"/main/list/item\";\r\n","/**\r\n * 로그인 처리 element\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport { logined } from \"../../stores/loginState\";\r\nimport { REQUEST } from \"../../constants/Link\";\r\n\r\n// styled-component로 ErrorMessage 스타일 적용\r\nconst ErrorMessege = styled.div`\r\n   padding-left: 10px;\r\n   color: red;\r\n`;\r\n\r\n// 스타일\r\nconst useStyles = makeStyles((theme) => ({\r\n   paper: {\r\n      margin: theme.spacing(8, 4),\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n   },\r\n   avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n   },\r\n   form: {\r\n      width: \"100%\", // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n   },\r\n   submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n   },\r\n}));\r\n\r\nfunction Auth({ onLogined }) {\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n   const [email, setEmail] = useState(\"\"); // 유저가 입력한 이메일 상태\r\n   const [pw, setPw] = useState(\"\"); // 유저가 입력한 비밀번호 상태\r\n   const [errMsg, setErrMsg] = useState(\"\"); // 에러메세지 상태\r\n   const classes = useStyles(); // 위에서 선언한 스타일 가져오리\r\n\r\n   // 인증 에러 핸들링\r\n   const errorHandle = (err) => {\r\n      if (err.code === \"auth/user-not-found\") {\r\n         setErrMsg(\"가입되지 않은 이메일입니다.\");\r\n      } else if (err.code === \"auth/invalid-email\") {\r\n         setErrMsg(\"이메일 형식을 지켜주세요.\");\r\n      } else if (err.code === \"auth/wrong-password\") {\r\n         setErrMsg(\"잘못된 비밀번호 입니다.\");\r\n      } else if (err.code === \"auth/weak-password\") {\r\n         setErrMsg(\"비밀번호는 최소 6자 이상이어야 합니다.\");\r\n      } else if (err.code === \"auth/email-already-in-use\") {\r\n         setErrMsg(\"이미 사용중인 이메일입니다.\");\r\n      } else if (err.code === \"auth/user-disabled\") {\r\n         setErrMsg(\"차단된 회원입니다.\");\r\n      } else {\r\n         setErrMsg(err.message);\r\n      }\r\n   };\r\n\r\n   // 로그인\r\n   const login = () => {\r\n      setEmail(\"\");\r\n      setPw(\"\");\r\n      history.push(REQUEST);\r\n   };\r\n\r\n   // 로그인 버튼 클릭시 호출\r\n   const onClick = (e) => {\r\n      e.preventDefault();\r\n      login();\r\n   };\r\n\r\n   // 입력 처리 콜백함수\r\n   const onChangeEmail = (e) => {\r\n      setEmail(e.target.value);\r\n   };\r\n   const onChangePw = (e) => {\r\n      setPw(e.target.value);\r\n   };\r\n\r\n   return (\r\n      <div className={classes.paper}>\r\n         <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n         </Avatar>\r\n         <Typography component=\"h1\" variant=\"h5\">\r\n            로그인\r\n         </Typography>\r\n         <form className={classes.form} noValidate>\r\n            <TextField\r\n               variant=\"outlined\"\r\n               margin=\"normal\"\r\n               required\r\n               fullWidth\r\n               id=\"email\"\r\n               label=\"Email Address\"\r\n               name=\"email\"\r\n               autoComplete=\"email\"\r\n               value={email}\r\n               onChange={onChangeEmail}\r\n               autoFocus\r\n            />\r\n            <TextField\r\n               variant=\"outlined\"\r\n               margin=\"normal\"\r\n               required\r\n               fullWidth\r\n               name=\"password\"\r\n               label=\"Password\"\r\n               type=\"password\"\r\n               id=\"password\"\r\n               value={pw}\r\n               onChange={onChangePw}\r\n               autoComplete=\"current-password\"\r\n            />\r\n            <ErrorMessege>{errMsg}</ErrorMessege>\r\n            <Button\r\n               type=\"submit\"\r\n               fullWidth\r\n               variant=\"contained\"\r\n               color=\"primary\"\r\n               className={classes.submit}\r\n               onClick={onClick}>\r\n               로그인\r\n            </Button>\r\n         </form>\r\n      </div>\r\n   );\r\n}\r\n\r\n// 리덕스 action을 가져오기 위한 함수\r\nfunction mapDispatchToProps(dispatch) {\r\n   return {\r\n      onLogined: (uid) => dispatch(logined(uid)),\r\n   };\r\n}\r\n\r\n// 현재 element를 리덕스와 연결시키서 export\r\nexport default connect(null, mapDispatchToProps)(Auth);\r\n","export default __webpack_public_path__ + \"static/media/mainImage.2e09f39a.png\";","/**\r\n * 로그인 화면\r\n */\r\n\r\nimport React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Auth from \"../components/auth/Auth\";\r\nimport pic from \"../mainImage.png\";\r\nimport { connect } from \"react-redux\";\r\nimport { logined } from \"../stores/loginState\";\r\n\r\n// 상태들\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      height: \"100vh\",\r\n   },\r\n   image: {\r\n      backgroundImage: `url(${pic})`,\r\n      backgroundRepeat: \"no-repeat\",\r\n      backgroundColor: \"white\",\r\n      backgroundSize: \"contain\",\r\n      backgroundPosition: \"center\",\r\n   },\r\n}));\r\n\r\nfunction Login({ onLogined, isLogined }) {\r\n   const classes = useStyles();\r\n\r\n   return (\r\n      <Grid container component=\"main\" className={classes.root}>\r\n         <CssBaseline />\r\n         <Grid item xs={12} sm={8} md={9} className={classes.image} />\r\n         <Grid\r\n            item\r\n            xs={false}\r\n            sm={4}\r\n            md={3}\r\n            component={Paper}\r\n            elevation={6}\r\n            square>\r\n            <Auth />\r\n         </Grid>\r\n      </Grid>\r\n   );\r\n}\r\n\r\n// 리덕스 action을 가져오기 위한 함수\r\nfunction mapDispatchToProps(dispatch) {\r\n   return {\r\n      onLogined: (uid) => dispatch(logined(uid)),\r\n   };\r\n}\r\n// 리덕스 상태를 가져오기 위한 함수\r\nfunction mapStateToProps(state) {\r\n   return {\r\n      isLogined: state.loginReducer.isLogined,\r\n   };\r\n}\r\n// 현재 element를 리덕스와 연결시키서 export\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","/**\r\n * 메인화면에서 좌측 drawer\r\n */\r\nimport React from \"react\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { REQUEST, WHOLELIST } from \"../../constants/Link\";\r\n\r\nexport const drawerWidth = 240; // drawer 너비.\r\n\r\n// 스타일\r\nconst useStyles = makeStyles((theme) => ({\r\n   drawerPaper: {\r\n      position: \"relative\",\r\n      whiteSpace: \"nowrap\",\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n         easing: theme.transitions.easing.sharp,\r\n         duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n   },\r\n   drawerPaperClose: {\r\n      overflowX: \"hidden\",\r\n      transition: theme.transitions.create(\"width\", {\r\n         easing: theme.transitions.easing.sharp,\r\n         duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n         width: theme.spacing(9),\r\n      },\r\n   },\r\n   toolbarIcon: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: \"0 8px\",\r\n      ...theme.mixins.toolbar,\r\n   },\r\n}));\r\n\r\nexport default function CustomDrawer({ open, handleDrawerClose }) {\r\n   const classes = useStyles(); // 위에서 선언한 스타일\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n   return (\r\n      <>\r\n         <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n               paper: clsx(\r\n                  classes.drawerPaper,\r\n                  !open && classes.drawerPaperClose\r\n               ),\r\n            }}\r\n            open={open}>\r\n            <div className={classes.toolbarIcon}>\r\n               <IconButton onClick={handleDrawerClose}>\r\n                  <ChevronLeftIcon />\r\n               </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n               <ListItem button onClick={() => history.push(REQUEST)}>\r\n                  <ListItemIcon>\r\n                     <DashboardIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"요청 리스트\" />\r\n               </ListItem>\r\n               <ListItem button onClick={() => history.push(WHOLELIST)}>\r\n                  <ListItemIcon>\r\n                     <DashboardIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"전체 리스트\" />\r\n               </ListItem>\r\n            </List>\r\n         </Drawer>\r\n      </>\r\n   );\r\n}\r\n","/**\r\n * 메인화면에서 보이는 상단의 툴바 element\r\n */\r\nimport React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { drawerWidth } from \"./CustomDrawer\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../stores/loginState\";\r\n\r\n// 스타일\r\nconst useStyles = makeStyles((theme) => ({\r\n   toolbar: {\r\n      paddingRight: 24,\r\n   },\r\n   appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n         easing: theme.transitions.easing.sharp,\r\n         duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n   },\r\n   appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n         easing: theme.transitions.easing.sharp,\r\n         duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n   },\r\n   menuButton: {\r\n      marginRight: 36,\r\n   },\r\n   menuButtonHidden: {\r\n      display: \"none\",\r\n   },\r\n   title: {\r\n      flexGrow: 1,\r\n   },\r\n}));\r\n\r\nfunction CustomToolbar({ open, handleDrawerOpen, onLogout }) {\r\n   const classes = useStyles(); // 위에서 선언한 스타일\r\n\r\n   // 좌측상단 버튼 눌렀을때 호출\r\n   const logout = () => {\r\n      // 로그아웃\r\n      onLogout();\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <AppBar\r\n            position=\"absolute\"\r\n            className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n            <Toolbar className={classes.toolbar}>\r\n               <IconButton\r\n                  edge=\"start\"\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={handleDrawerOpen}\r\n                  className={clsx(\r\n                     classes.menuButton,\r\n                     open && classes.menuButtonHidden\r\n                  )}>\r\n                  <MenuIcon />\r\n               </IconButton>\r\n               <Typography\r\n                  component=\"h1\"\r\n                  variant=\"h6\"\r\n                  color=\"inherit\"\r\n                  noWrap\r\n                  className={classes.title}>\r\n                  LocateC admin\r\n               </Typography>\r\n               <IconButton color=\"inherit\" onClick={logout}>\r\n                  <ExitToAppIcon fontSize=\"large\" />\r\n               </IconButton>\r\n            </Toolbar>\r\n         </AppBar>\r\n      </>\r\n   );\r\n}\r\n\r\n// 리덕스 action을 가져오기 위한 함수\r\nfunction mapDispatchToProps(dispatch) {\r\n   return {\r\n      onLogout: () => dispatch(logout()),\r\n   };\r\n}\r\n\r\n// 현재 element를 리덕스와 연결시키서 export\r\nexport default connect(null, mapDispatchToProps)(CustomToolbar);\r\n","// 문자열 전역관리\r\n\r\nexport const smokingPlace = \"흡연부스\";\r\nexport const trashcan = \"쓰레기통\";\r\nexport const locStrArray = [smokingPlace, trashcan];\r\n","// locationType 관리\r\nexport const SMOKE = \"smoking\";\r\nexport const TRASHCAN = \"trash\";\r\n\r\nexport const locationTypeArray = [SMOKE, TRASHCAN];\r\n","import { smokingPlace, trashcan } from \"../constants/Strings\";\r\nimport { SMOKE, TRASHCAN } from \"../constants/types\";\r\n\r\n// location type 을 해당하는 문자열로 바꾸어주는 함수\r\nexport default function mapLocTypeToStr(type) {\r\n   switch (type) {\r\n      case SMOKE:\r\n         return smokingPlace;\r\n      case TRASHCAN:\r\n         return trashcan;\r\n      default:\r\n         return smokingPlace;\r\n   }\r\n}\r\n\r\n// 문자열을 해당하는 location type으로 바꾸어주는 함수\r\nexport function mapStrToLocType(str) {\r\n   switch (str) {\r\n      case smokingPlace:\r\n         return SMOKE;\r\n      case trashcan:\r\n         return TRASHCAN;\r\n      default:\r\n         return SMOKE;\r\n   }\r\n}\r\n","// 요청 리스트 렌더\r\nimport React from \"react\";\r\nimport {\r\n   Divider,\r\n   IconButton,\r\n   List,\r\n   ListItem,\r\n   ListItemSecondaryAction,\r\n   ListItemText,\r\n   Typography,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { useHistory } from \"react-router\";\r\nimport mapLocTypeToStr from \"../../utils/mapLocTypeToStr\";\r\nimport { REQUEST_ITEM } from \"../../constants/Link\";\r\n\r\nfunction PageList({ list, setLoading, setItem, setRefresh }) {\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n\r\n   // 요청 클릭시 그 요청의 데이터를 page 상태에 넣고, pageItem으로 이동\r\n   const onClick = async (item) => {\r\n      setLoading(true);\r\n      setItem(item);\r\n      history.push(REQUEST_ITEM);\r\n      setLoading(false);\r\n   };\r\n\r\n   // 허가 눌렀을 시 호출\r\n   const onApprove = async (item) => {\r\n      setLoading(true);\r\n      // 한번 더 확인\r\n      if (window.confirm(\"허가하시겠습니까?\")) {\r\n         try {\r\n            setRefresh((prev) => prev + 1);\r\n         } catch (e) {\r\n            window.alert(\"요청에 실패했습니다!\");\r\n         }\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   // 거부 눌렀을 시 호출\r\n   const onDecline = async (item) => {\r\n      setLoading(true);\r\n      // 한번 더 확인\r\n      if (window.confirm(\"거부하시겠습니까?\")) {\r\n         try {\r\n            setRefresh((prev) => prev + 1);\r\n         } catch (e) {\r\n            window.alert(\"요청에 실패했습니다!\");\r\n         }\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n            요청 리스트\r\n         </Typography>\r\n         <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            {list.length === 0 ? (\r\n               <>\r\n                  <ListItem>\r\n                     <ListItemText primary=\"요청이 없습니다.\" />\r\n                  </ListItem>\r\n                  <Divider />\r\n               </>\r\n            ) : (\r\n               list.map((item, idx) => {\r\n                  return (\r\n                     <>\r\n                        <ListItem\r\n                           id={idx}\r\n                           key={idx}\r\n                           button\r\n                           onClick={() => onClick(item)}>\r\n                           <ListItemText\r\n                              primary={`${idx + 1}) 위도 : ${\r\n                                 item.coords.latitude\r\n                              }, 경도 : ${item.coords.longitude}`}\r\n                              secondary={mapLocTypeToStr(item.type)}\r\n                           />\r\n                           <ListItemSecondaryAction>\r\n                              <IconButton\r\n                                 edge=\"end\"\r\n                                 aria-label=\"approve\"\r\n                                 onClick={() => onApprove(item)}>\r\n                                 <AddIcon />\r\n                              </IconButton>\r\n                              <IconButton\r\n                                 edge=\"end\"\r\n                                 aria-label=\"decline\"\r\n                                 onClick={() => onDecline(item)}>\r\n                                 <RemoveIcon />\r\n                              </IconButton>\r\n                           </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                     </>\r\n                  );\r\n               })\r\n            )}\r\n         </List>\r\n      </>\r\n   );\r\n}\r\nexport default PageList;\r\n","/**\r\n * react-google-maps를 감싼 element\r\n * 간단히 coords만 인자로 넘기면 그곳에 marker를 찍은 지도를 보여주고,\r\n * onClick을 넘기면, 지도에 연동하여 그게 맞는 동작을 한다\r\n */\r\n\r\nimport {\r\n   withScriptjs,\r\n   withGoogleMap,\r\n   GoogleMap,\r\n   Marker,\r\n} from \"react-google-maps\";\r\n\r\n// 지도를 한번 감싸기\r\nconst MapWrap = withScriptjs(\r\n   withGoogleMap(({ coords, onClick }) => {\r\n      return (\r\n         <GoogleMap\r\n            defaultZoom={18}\r\n            defaultCenter={{\r\n               lat: coords?.latitude,\r\n               lng: coords?.longitude,\r\n            }}\r\n            onClick={onClick ? onClick : () => {}}>\r\n            <Marker\r\n               position={{\r\n                  lat: coords?.latitude,\r\n                  lng: coords?.longitude,\r\n               }}\r\n            />\r\n         </GoogleMap>\r\n      );\r\n   })\r\n);\r\n\r\n// api kay, 기타 기초 스타일 적용\r\nexport default function MapWrapWithScript({ coords, onClick }) {\r\n   return (\r\n      <MapWrap\r\n         googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLEMAP_KEY}&v=3.exp&libraries=geometry,drawing,places`}\r\n         loadingElement={<div style={{ height: `100%` }} />}\r\n         containerElement={<div style={{ height: `400px` }} />}\r\n         mapElement={<div style={{ height: `100%` }} />}\r\n         coords={coords}\r\n         onClick={onClick}\r\n      />\r\n   );\r\n}\r\n","/**\r\n * 한 요청의 데이터를 보여주는 곳\r\n * 위도 경도를 지도에 보여주고, 등록한 사진이 있으면 보여준다.\r\n */\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MapWrap from \"../elements/MapWrap\";\r\nimport { REQUEST } from \"../../constants/Link\";\r\n\r\n// 스타일\r\nconst useStyles = makeStyles(() => ({\r\n   button: {\r\n      maxWidth: \"100px\",\r\n      margin: \"10px 0px\",\r\n      float: \"left\",\r\n   },\r\n   goPage: {\r\n      margin: \"10px 0px\",\r\n      lineHeight: \"36px\",\r\n      fontSize: \"15px\",\r\n      textAlign: \"center\",\r\n   },\r\n}));\r\n\r\nfunction PageItem({ item }) {\r\n   const classes = useStyles(); // 위에서 선언한 스타일\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n\r\n   return (\r\n      <>\r\n         <div>\r\n            <Button\r\n               variant=\"contained\"\r\n               color=\"primary\"\r\n               onClick={() => history.push(REQUEST)}\r\n               className={classes.button}>\r\n               뒤로가기\r\n            </Button>\r\n         </div>\r\n         <MapWrap coords={item?.coords} />\r\n         {item.image ? (\r\n            <img\r\n               src={item?.image}\r\n               alt=\"error\"\r\n               style={{ width: 400, height: 300 }}\r\n            />\r\n         ) : (\r\n            <div\r\n               style={{\r\n                  position: \"relative\",\r\n                  width: 400,\r\n                  height: 300,\r\n               }}>\r\n               <p\r\n                  style={{\r\n                     position: \"absolute\",\r\n                     left: 200,\r\n                     top: 150,\r\n                     transform: \"translate(-50%,-50%)\",\r\n                  }}>\r\n                  사진이 없습니다.\r\n               </p>\r\n            </div>\r\n         )}\r\n      </>\r\n   );\r\n}\r\nexport default PageItem;\r\n","// 요청 리스트 렌더\r\nimport React from \"react\";\r\nimport {\r\n   Button,\r\n   Divider,\r\n   IconButton,\r\n   List,\r\n   ListItem,\r\n   ListItemSecondaryAction,\r\n   ListItemText,\r\n   Typography,\r\n} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useHistory } from \"react-router\";\r\nimport mapLocTypeToStr from \"../../utils/mapLocTypeToStr\";\r\nimport { WHOLELIST_ITEM } from \"../../constants/Link\";\r\n\r\nfunction WholeList({ list, setLoading, setItem, setRefresh }) {\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n\r\n   // 요청 클릭시 그 요청의 데이터를 page 상태에 넣고, pageItem으로 이동\r\n   const onClick = async (item) => {\r\n      setItem({ item, isMutation: false });\r\n      history.push(WHOLELIST_ITEM);\r\n   };\r\n\r\n   // 수정 눌렀을 시 호출\r\n   const onApprove = async (item) => {\r\n      // 한번 더 확인\r\n      if (window.confirm(\"수정하시겠습니까?\")) {\r\n         setItem({ item, isMutation: true });\r\n         history.push(WHOLELIST_ITEM);\r\n      }\r\n   };\r\n\r\n   // 삭제 눌렀을 시 호출\r\n   const onDecline = async (item) => {\r\n      setLoading(true);\r\n      // 한번 더 확인\r\n      if (window.confirm(\"삭제하시겠습니까?\")) {\r\n         setRefresh((prev) => prev + 1);\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n            <Typography\r\n               component=\"h2\"\r\n               variant=\"h6\"\r\n               color=\"primary\"\r\n               gutterBottom>\r\n               전체 리스트\r\n            </Typography>\r\n\r\n            <Button\r\n               variant=\"contained\"\r\n               color=\"primary\"\r\n               onClick={() => {\r\n                  history.push(WHOLELIST_ITEM);\r\n                  setItem({ item: null, isMutation: true });\r\n               }}\r\n               style={{\r\n                  maxWidth: \"100px\",\r\n               }}>\r\n               생성\r\n            </Button>\r\n         </div>\r\n         <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            {list.length === 0 ? (\r\n               <>\r\n                  <ListItem>\r\n                     <ListItemText primary=\"아이템이 없습니다.\" />\r\n                  </ListItem>\r\n                  <Divider />\r\n               </>\r\n            ) : (\r\n               list.map((item, idx) => {\r\n                  return (\r\n                     <>\r\n                        <ListItem\r\n                           id={idx}\r\n                           key={`wholelist_${idx}`}\r\n                           button\r\n                           onClick={() => onClick(item)}>\r\n                           <ListItemText\r\n                              primary={`${idx + 1}) 위도 : ${\r\n                                 item.coords.latitude\r\n                              }, 경도 : ${item.coords.longitude}`}\r\n                              secondary={mapLocTypeToStr(item.type)}\r\n                           />\r\n                           <ListItemSecondaryAction>\r\n                              <IconButton\r\n                                 edge=\"end\"\r\n                                 aria-label=\"approve\"\r\n                                 onClick={() => onApprove(item)}>\r\n                                 <EditIcon />\r\n                              </IconButton>\r\n                              <IconButton\r\n                                 edge=\"end\"\r\n                                 aria-label=\"decline\"\r\n                                 onClick={() => onDecline(item)}>\r\n                                 <DeleteIcon />\r\n                              </IconButton>\r\n                           </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                     </>\r\n                  );\r\n               })\r\n            )}\r\n         </List>\r\n      </>\r\n   );\r\n}\r\nexport default WholeList;\r\n","/**\r\n * 한 요청의 데이터를 보여주는 곳\r\n * 위도 경도를 지도에 보여주고, 등록한 사진이 있으면 보여준다.\r\n */\r\nimport { Button, makeStyles, Menu, MenuItem } from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { WHOLELIST } from \"../../constants/Link\";\r\nimport MapWrap from \"../elements/MapWrap\";\r\nimport { locationTypeArray, SMOKE } from \"../../constants/types\";\r\nimport mapLocTypeToStr from \"../../utils/mapLocTypeToStr\";\r\n// 스타일\r\nconst useStyles = makeStyles(() => ({\r\n   topButton: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n   },\r\n   button: {\r\n      maxWidth: \"100px\",\r\n      margin: \"10px 0px\",\r\n   },\r\n   goPage: {\r\n      margin: \"10px 0px\",\r\n      lineHeight: \"36px\",\r\n      fontSize: \"15px\",\r\n      textAlign: \"center\",\r\n   },\r\n}));\r\n\r\nfunction WholeListItem({ item, setLoading, setRefresh }) {\r\n   const classes = useStyles(); // 위에서 선언한 스타일\r\n   const history = useHistory(); // 브라우저 history 객체 가져오기\r\n   const [curItem, setCurItem] = useState();\r\n   const [isMutation, setIsMutation] = useState(false);\r\n   const [isEdit, setIsEdit] = useState(false);\r\n   const [anchorEl, setAnchorEl] = useState();\r\n   const photoAddBtnRef = useRef();\r\n\r\n   // edit 일 경우 item이 넘어왔으므로, item으로 초기화\r\n   // 아니면 생성이므로, 기본상태로 초기화\r\n   useEffect(() => {\r\n      if (item?.item) {\r\n         setCurItem(item.item);\r\n         if (item.isMutation) {\r\n            // item 있고, isMutation이 true면 수정모드\r\n            setIsEdit(true);\r\n         }\r\n      } else {\r\n         setCurItem({\r\n            type: SMOKE,\r\n            coords: {\r\n               latitude: 37.63232307069136,\r\n               longitude: 127.07801836259382,\r\n            },\r\n            image: \"\",\r\n         });\r\n      }\r\n      setIsMutation(item?.isMutation);\r\n   }, [item]);\r\n\r\n   // 수정 또는 생성 요청 보내기\r\n   const onPressComplete = async () => {\r\n      setLoading(true);\r\n      if (window.confirm(`${isEdit ? \"수정\" : \"생성\"}요청을 보내겠습니까?`)) {\r\n         try {\r\n            let obj = {\r\n               productId: curItem.id,\r\n               latitude: curItem.coords.latitude,\r\n               longitude: curItem.coords.longitude,\r\n               type: curItem.type,\r\n               image: curItem.image || null,\r\n            };\r\n            if (curItem.image) {\r\n               if (curItem.image.startsWith(\"https://\")) {\r\n                  // 사진이 https://로 시작하면 변경되지않은거. null로 보낸다.\r\n                  obj = { ...obj, image: null };\r\n               } else {\r\n                  // 사진이 base64 형식일경우, 앞에있는 데이터 타입 식별자 제거\r\n                  obj = {\r\n                     ...obj,\r\n                     image: obj.image.substring(obj.image.indexOf(\",\") + 1),\r\n                  };\r\n               }\r\n            }\r\n            //수정일땐 수정 api, 생성일땐 생성 api 호출\r\n            if (isEdit) {\r\n               // 수정 요청\r\n            } else {\r\n               // 생성 요청\r\n            }\r\n            setRefresh((prev) => prev + 1);\r\n            history.push(WHOLELIST);\r\n         } catch (e) {\r\n            console.log(e.response);\r\n         }\r\n      }\r\n      setLoading(false);\r\n   };\r\n\r\n   // 타입 선택 함수\r\n   const onClickLocationType = (type) => {\r\n      setCurItem((prev) => ({ ...prev, type: type }));\r\n      setAnchorEl(null);\r\n   };\r\n\r\n   // 지도 클릭시 마커 이동\r\n   const onClickMap = ({ latLng }) => {\r\n      setCurItem((prev) => ({\r\n         ...prev,\r\n         coords: { latitude: latLng.lat(), longitude: latLng.lng() },\r\n      }));\r\n   };\r\n\r\n   // 이미지 등록 버튼 눌렀을때\r\n   const onClickAddPhoto = () => {\r\n      photoAddBtnRef.current?.click();\r\n   };\r\n\r\n   // 이미지 등록 콜백\r\n   const photoChange = (e) => {\r\n      e.preventDefault();\r\n      let reader = new FileReader();\r\n\r\n      reader.onloadend = () => {\r\n         // 2. 읽기가 완료되면 아래코드가 실행\r\n         const base64 = reader.result;\r\n         if (base64) {\r\n            setCurItem((prev) => ({\r\n               ...prev,\r\n               image: base64,\r\n            }));\r\n         }\r\n      };\r\n      if (e.target.files[0]) {\r\n         reader.readAsDataURL(e.target.files[0]); // 1. 파일을 읽어 버퍼에 저장\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <div className={classes.topButton}>\r\n            <Button\r\n               variant=\"contained\"\r\n               color=\"primary\"\r\n               onClick={() => history.push(WHOLELIST)}\r\n               className={classes.button}>\r\n               뒤로가기\r\n            </Button>\r\n            {isMutation && (\r\n               <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={onPressComplete}\r\n                  className={classes.button}>\r\n                  완료\r\n               </Button>\r\n            )}\r\n         </div>\r\n         <div>\r\n            <Button\r\n               color=\"primary\"\r\n               onClick={(e) => setAnchorEl(e.currentTarget)}\r\n               className={classes.button}>\r\n               {mapLocTypeToStr(curItem?.type)}\r\n            </Button>\r\n            {isMutation && (\r\n               <Menu\r\n                  anchorEl={anchorEl}\r\n                  open={Boolean(anchorEl)}\r\n                  onClose={() => setAnchorEl(null)}>\r\n                  {locationTypeArray?.map((item, idx) => {\r\n                     return (\r\n                        <MenuItem\r\n                           key={`menuitem_${idx}`}\r\n                           onClick={() => onClickLocationType(item)}>\r\n                           {mapLocTypeToStr(item)}\r\n                        </MenuItem>\r\n                     );\r\n                  })}\r\n               </Menu>\r\n            )}\r\n         </div>\r\n         <MapWrap\r\n            coords={curItem?.coords}\r\n            onClick={isMutation ? onClickMap : () => {}}\r\n         />\r\n         <div>\r\n            {curItem?.image && (\r\n               <img\r\n                  src={curItem?.image}\r\n                  alt=\"error\"\r\n                  style={{ width: 400, height: 300 }}\r\n               />\r\n            )}\r\n            <br />\r\n\r\n            {isMutation && (\r\n               <>\r\n                  <Button\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n                     onClick={onClickAddPhoto}>\r\n                     이미지 등록\r\n                  </Button>\r\n                  <input\r\n                     ref={photoAddBtnRef}\r\n                     type=\"file\"\r\n                     accept=\"image/*\"\r\n                     style={{ display: \"none\" }}\r\n                     onChange={photoChange}\r\n                  />\r\n               </>\r\n            )}\r\n         </div>\r\n      </>\r\n   );\r\n}\r\nexport default WholeListItem;\r\n","/**\r\n * 홈 화면\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { CircularProgress, makeStyles, Modal, Paper } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport { Route } from \"react-router\";\r\nimport PageList from \"../components/request/PageList\";\r\nimport PageItem from \"../components/request/PageItem\";\r\nimport WholeList from \"../components/wholeList/WholeList\";\r\nimport WholeListItem from \"../components/wholeList/WholeListItem,\";\r\nimport {\r\n   REQUEST,\r\n   REQUEST_ITEM,\r\n   WHOLELIST,\r\n   WHOLELIST_ITEM,\r\n} from \"../constants/Link\";\r\nimport { SMOKE, TRASHCAN } from \"../constants/types\";\r\n\r\n// 스타일들\r\nconst useStyles = makeStyles((theme) => ({\r\n   paper: {\r\n      padding: theme.spacing(2),\r\n      display: \"flex\",\r\n      overflow: \"auto\",\r\n      flexDirection: \"column\",\r\n   },\r\n   fixedHeight: {\r\n      height: \"100%\",\r\n   },\r\n   content: {\r\n      flexGrow: 1,\r\n      height: \"100vh\",\r\n      overflow: \"auto\",\r\n   },\r\n   container: {\r\n      paddingTop: theme.spacing(4),\r\n      paddingBottom: theme.spacing(4),\r\n   },\r\n\r\n   loading: {\r\n      position: \"absolute\",\r\n      top: \"47%\",\r\n      left: \"47%\",\r\n   },\r\n   appBarSpacer: theme.mixins.toolbar,\r\n}));\r\n\r\nconst tempRequestList = [\r\n   {\r\n      id: 1,\r\n      type: TRASHCAN,\r\n      coords: {\r\n         latitude: 37.630682295065505,\r\n         longitude: 127.0804025572257,\r\n      },\r\n      image: \"https://www.costco.co.kr/medias/sys_master/images/hb9/hb8/15318005022750.jpg\",\r\n   },\r\n   {\r\n      id: 2,\r\n      type: SMOKE,\r\n      coords: {\r\n         latitude: 37.629635550859,\r\n         longitude: 127.08086267102873,\r\n      },\r\n      image: \"https://newsimg.hankookilbo.com/cms/articlerelease/2015/10/18/201510182224437401_1.jpg\",\r\n   },\r\n   {\r\n      id: 3,\r\n      type: SMOKE,\r\n      coords: {\r\n         latitude: 37.63133962861005,\r\n         longitude: 127.07673969062887,\r\n      },\r\n      image: \"https://newsimg.hankookilbo.com/cms/articlerelease/2015/10/18/201510182224437401_1.jpg\",\r\n   },\r\n   {\r\n      id: 4,\r\n      type: TRASHCAN,\r\n      coords: {\r\n         latitude: 37.63311154223848,\r\n         longitude: 127.07690659454285,\r\n      },\r\n      image: \"https://www.costco.co.kr/medias/sys_master/images/hb9/hb8/15318005022750.jpg\",\r\n   },\r\n   {\r\n      id: 5,\r\n      type: SMOKE,\r\n      coords: {\r\n         latitude: 37.633976049288925,\r\n         longitude: 127.08052886291345,\r\n      },\r\n      image: \"https://newsimg.hankookilbo.com/cms/articlerelease/2015/10/18/201510182224437401_1.jpg\",\r\n   },\r\n   {\r\n      id: 6,\r\n      type: TRASHCAN,\r\n      coords: {\r\n         latitude: 37.634836974008856,\r\n         longitude: 127.07739828481888,\r\n      },\r\n      image: \"https://www.costco.co.kr/medias/sys_master/images/hb9/hb8/15318005022750.jpg\",\r\n   },\r\n   {\r\n      id: 7,\r\n      type: SMOKE,\r\n      coords: {\r\n         latitude: 37.6349341635446,\r\n         longitude: 127.07542743118924,\r\n      },\r\n      image: \"https://newsimg.hankookilbo.com/cms/articlerelease/2015/10/18/201510182224437401_1.jpg\",\r\n   },\r\n];\r\n\r\nfunction Home() {\r\n   const classes = useStyles();\r\n   const [loading, setLoading] = useState(false); // 로딩 상태 관리\r\n   const [requestItem, setRequestItem] = useState(null); // 요청 리스트 중 하나를 선택할지 여기에 그 데이터가 들어감\r\n   const [requestList, setRequestList] = useState([]); // 요청리스트\r\n   const [wholeListItem, setWholeListItem] = useState(null); // 전체 리스트 중 하나를 선택할지 여기에 그 데이터가 들어감\r\n   const [wholeList, setWholeList] = useState([]); // 전체 리스트\r\n   const [refresh, setRefresh] = useState(0);\r\n\r\n   // 가운데 paper 사이즈 적용\r\n   const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n   useEffect(() => {\r\n      // 리스트 받아오기\r\n      const getList = async () => {\r\n         setLoading(true);\r\n         // 요청리스트 받아오기\r\n         setRequestList(tempRequestList);\r\n         setWholeList(tempRequestList);\r\n         setLoading(false);\r\n      };\r\n      getList();\r\n   }, [refresh]);\r\n\r\n   return (\r\n      <>\r\n         <main className={classes.content}>\r\n            <div className={classes.appBarSpacer} />\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n               <Paper className={fixedHeightPaper}>\r\n                  <Route exact path={REQUEST}>\r\n                     <PageList\r\n                        setLoading={setLoading}\r\n                        list={requestList}\r\n                        setItem={setRequestItem}\r\n                        setRefresh={setRefresh}\r\n                     />\r\n                  </Route>\r\n                  <Route path={REQUEST_ITEM}>\r\n                     <PageItem item={requestItem} />\r\n                  </Route>\r\n                  <Route exact path={WHOLELIST}>\r\n                     <WholeList\r\n                        setLoading={setLoading}\r\n                        list={wholeList}\r\n                        setItem={setWholeListItem}\r\n                        setRefresh={setRefresh}\r\n                     />\r\n                  </Route>\r\n                  <Route path={WHOLELIST_ITEM}>\r\n                     <WholeListItem\r\n                        item={wholeListItem}\r\n                        setItem={setWholeListItem}\r\n                        setLoading={setLoading}\r\n                        setRefresh={setRefresh}\r\n                     />\r\n                  </Route>\r\n               </Paper>\r\n            </Container>\r\n         </main>\r\n         <Modal open={loading}>\r\n            <CircularProgress color=\"secondary\" className={classes.loading} />\r\n         </Modal>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport CustomDrawer from \"../components/dashbord/CustomDrawer\";\r\nimport { connect } from \"react-redux\";\r\nimport CustomToolbar from \"../components/dashbord/CustomToolbar\";\r\nimport Home from \"./Home\";\r\n\r\nfunction Main({ isLogined, history }) {\r\n   // 좌측 drawer을 열지 말지 결정하는 상태\r\n   const [open, setOpen] = React.useState(true);\r\n\r\n   // 여는 버튼 눌렀을때 호출되는 콜백\r\n   const handleDrawerOpen = () => {\r\n      setOpen(true);\r\n   };\r\n   // 닫는 버튼 눌렀을때 호출되는 콜백\r\n   const handleDrawerClose = () => {\r\n      setOpen(false);\r\n   };\r\n\r\n   useEffect(() => {\r\n      // 아래에 해당하는 기기이면 drawer 닫은 상태로 초기 렌더하기\r\n      if (\r\n         /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n            navigator.userAgent\r\n         )\r\n      ) {\r\n         setOpen(false);\r\n      }\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      // 로그인 되어있지 않으면 로그인 화면으로 이동시키기\r\n      if (!isLogined) {\r\n         //  history.push(\"/\");\r\n      }\r\n   }, [isLogined, history]);\r\n\r\n   return (\r\n      <div\r\n         style={{\r\n            display: \"flex\",\r\n         }}>\r\n         <CssBaseline />\r\n         <CustomToolbar open={open} handleDrawerOpen={handleDrawerOpen} />\r\n         <CustomDrawer open={open} handleDrawerClose={handleDrawerClose} />\r\n         <Home />\r\n      </div>\r\n   );\r\n}\r\n\r\n// 리덕스 상태를 가져오기 위한 함수\r\nfunction mapStateToProps(state) {\r\n   return {\r\n      isLogined: state.loginReducer.isLogined,\r\n   };\r\n}\r\n\r\n// 현재 element를 리덕스와 연결시키서 export\r\nexport default connect(mapStateToProps)(Main);\r\n","import { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Login from \"./routes/Login\";\r\nimport Main from \"./routes/Main\";\r\n\r\n// 라우터 연동\r\n// 가장 초기화면은 로그인화면. 인증이 됐을 경우 main으로 이동한다.\r\nfunction App() {\r\n   return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n         <Route exact path=\"/\" component={Login} />\r\n         <Route path=\"/main\" component={Main} />\r\n      </Router>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport persistStore from \"redux-persist/es/persistStore\";\r\nimport storage from \"redux-persist/lib/storage/session\";\r\n\r\nimport loginReducer from \"./loginState\";\r\n\r\nconst persistConfig = {\r\n   key: \"root\",\r\n   storage,\r\n};\r\n\r\n// 리듀서 합치기\r\nconst rootReducer = combineReducers({\r\n   loginReducer,\r\n});\r\n\r\n// 새로고침을 해도 인증상태가 유지되도록 persistReducer에 연결\r\nconst enhancedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// 스토어와 persistGate에 연동을 위한 persistor를 리턴하는 함수 export\r\nexport default function configureStore() {\r\n   const store = createStore(enhancedReducer);\r\n   const persistor = persistStore(store);\r\n   return { store, persistor };\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./stores\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\n// Provider와 PersistGate에 연동할 store와 persistor 가져오기\r\nconst { store, persistor } = configureStore();\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n         <App />\r\n      </PersistGate>\r\n   </Provider>,\r\n   document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}